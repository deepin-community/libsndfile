From: IOhannes m zmoelnig <umlaeute@debian.org>
Date: Wed, 5 Oct 2016 00:00:00 +0200
Subject: fixed spelling errors

Forwarded: yes
Last-Update: 2016-10-05

discovered by lintian
---
 doc/bugs.html              | 2 +-
 programs/sndfile-convert.c | 2 +-
 src/ogg.c                  | 2 +-
 src/wavlike.c              | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

--- libsndfile.orig/programs/sndfile-convert.c
+++ libsndfile/programs/sndfile-convert.c
@@ -336,7 +336,7 @@
 	if ((sfinfo.format & SF_FORMAT_SUBMASK) == SF_FORMAT_GSM610 && sfinfo.samplerate != 8000)
 	{	printf (
 			"WARNING: GSM 6.10 data format only supports 8kHz sample rate. The converted\n"
-			"ouput file will contain the input data converted to the GSM 6.10 data format\n"
+			"output file will contain the input data converted to the GSM 6.10 data format\n"
 			"but not re-sampled.\n"
 			) ;
 		} ;
--- libsndfile.orig/src/ogg.c
+++ libsndfile/src/ogg.c
@@ -807,7 +807,7 @@
 			break ;
 		} ;
 
-	psf_log_printf (psf, "This Ogg bitstream contains some uknown data type.\n") ;
+	psf_log_printf (psf, "This Ogg bitstream contains some unknown data type.\n") ;
 	return SFE_UNIMPLEMENTED ;
 } /* ogg_stream_classify */
 
--- libsndfile.orig/src/wavlike.c
+++ libsndfile/src/wavlike.c
@@ -161,7 +161,7 @@
 	{	psf_log_printf (psf, "  Bit Width     : 24\n") ;
 
 		psf_log_printf (psf, "\n"
-			"  Ambiguous information in 'fmt ' chunk. Possibile file types:\n"
+			"  Ambiguous information in 'fmt ' chunk. Possible file types:\n"
 			"    0) Invalid IEEE float file generated by Syntrillium's Cooledit!\n"
 			"    1) File generated by ALSA's arecord containing 24 bit samples in 32 bit containers.\n"
 			"    2) 24 bit file with incorrect Block Align value.\n"
--- libsndfile.orig/src/ogg_opus.c
+++ libsndfile/src/ogg_opus.c
@@ -1440,7 +1440,7 @@
 		oopus->pkt_pos = oopus->pg_pos - gp ;
 		}
 	else if (gp < oopus->pg_pos)
-	{	psf_log_printf (psf, "Opus : First data page is also the last, and granule position has an (ambigious) offset.\n") ;
+	{	psf_log_printf (psf, "Opus : First data page is also the last, and granule position has an (ambiguous) offset.\n") ;
 		return SFE_MALFORMED_FILE ;
 		} ;
 	oopus->u.decode.gp_start = oopus->pkt_pos ;
--- libsndfile.orig/tests/misc_test.c
+++ libsndfile/tests/misc_test.c
@@ -293,7 +293,7 @@
 	sfinfo.frames = 0 ;
 
 	if ((file = sf_open (filename, SFM_WRITE, &sfinfo)) != NULL)
-	{	printf ("\n\nLine %d : Error, file should not have openned.\n", __LINE__ - 1) ;
+	{	printf ("\n\nLine %d : Error, file should not have opened.\n", __LINE__ - 1) ;
 		exit (1) ;
 		} ;
 
--- libsndfile.orig/tests/win32_test.c
+++ libsndfile/tests/win32_test.c
@@ -135,7 +135,7 @@
 
 	printf ("2) Now use system (\"%s %s\") to show the file length.\n\n", dir_cmd, filename) ;
 
-	/* Would use snprintf, but thats not really available on windows. */
+	/* Would use snprintf, but that's not really available on windows. */
 	memset (data, 0, sizeof (data)) ;
 	strncpy (data, dir_cmd, sizeof (data) - 1) ;
 	strncat (data, " ", sizeof (data) - 1 - strlen (data)) ;
@@ -155,7 +155,7 @@
 	close (fd) ;
 
 	if (statbuf.st_size != 2 * sizeof (data))
-		printf ("but thats just plain ***WRONG***.\n\n") ;
+		printf ("but that's just plain ***WRONG***.\n\n") ;
 	else
 	{	printf ("which is correct.\n\n") ;
 		unlink (filename) ;
@@ -196,7 +196,7 @@
 
 	printf ("2) Now use system (\"%s %s\") to show the file length.\n\n", dir_cmd, filename) ;
 
-	/* Would use snprintf, but thats not really available on windows. */
+	/* Would use snprintf, but that's not really available on windows. */
 	memset (data, 0, sizeof (data)) ;
 	strncpy (data, dir_cmd, sizeof (data) - 1) ;
 	strncat (data, " ", sizeof (data) - 1 - strlen (data)) ;
@@ -213,7 +213,7 @@
 	close (fd) ;
 
 	if (retval != 2 * sizeof (data))
-		printf ("but thats just plain ***WRONG***.\n\n") ;
+		printf ("but that's just plain ***WRONG***.\n\n") ;
 	else
 	{	printf ("which is correct.\n\n") ;
 		unlink (filename) ;
@@ -244,7 +244,7 @@
 
 	assert (write (fd, data, sizeof (data)) > 0) ;
 
-	printf ("1) Now call stat and fstat on the file and retreive the file lengths.\n") ;
+	printf ("1) Now call stat and fstat on the file and retrieve the file lengths.\n") ;
 
 	if (stat (filename, &buf) != 0)
 	{	printf ("\n\nLine %d: stat() failed : %s\n\n", __LINE__, strerror (errno)) ;
@@ -262,7 +262,7 @@
 
 
 	if (stat_size == 0 || stat_size != fstat_size)
-		printf ("but thats just plain ***WRONG***.\n\n") ;
+		printf ("but that's just plain ***WRONG***.\n\n") ;
 	else
 		printf ("which is correct.\n\n") ;
 
